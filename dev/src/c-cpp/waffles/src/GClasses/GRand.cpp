/*
	Copyright (C) 2006, Mike Gashler

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	see http://www.gnu.org/copyleft/lesser.html
*/

#include <string.h>
#include "GRand.h"
#include <math.h>
#include "GError.h"
#include <stdlib.h>
#ifndef MIN_PREDICT
#include "GHistogram.h"
#include "GTime.h"
#include "GMath.h"
#endif // MIN_PREDICT
#include "GVec.h"
#ifndef MIN_PREDICT
#include "GReverseBits.h"
#endif // MIN_PREDICT
#include <cmath>
#include <ctime>
#ifdef WINDOWS
#include <process.h>
#else 
#include <unistd.h>
#endif

namespace GClasses {

using std::vector;

COMPILER_ASSERT(sizeof(uint64_t) == 8);

GRand::GRand(uint64_t seed)
{
	setSeed(seed);
}

GRand::~GRand()
{
}

void GRand::setSeed(uint64_t seed)
{
	m_b = 0xCA535ACA9535ACB2ull + seed;
	m_a = 0x6CCF6660A66C35E7ull + (seed << 24);
}

uint64_t GRand::next(uint64_t range)
{
	// Use rejection to find a random value in a range that is a multiple of "range"
	uint64_t n = (0xffffffffffffffffull % range) + 1;
	uint64_t x;
	do
	{
		x = next();
	} while((x + n) < n);

	// Use modulus to return the final value
	return x % range;
}

double GRand::uniform()
{
	// use 52 random bits for the mantissa (as specified in IEEE 754. See
	// http://en.wikipedia.org/wiki/Double_precision_floating-point_format)
	return (double)(next() & 0xfffffffffffffull) / 4503599627370496.0;
}

double GRand::normal()
{
	double x, y, mag;
	do
	{
		x = uniform() * 2 - 1;
		y = uniform() * 2 - 1;
		mag = x * x + y * y;
	} while(mag >= 1.0 || mag == 0);
	return y * sqrt(-2.0 * log(mag) / mag); // the Box-Muller transform	
}

size_t GRand::categorical(vector<double>& probabilities)
{
	double d = uniform();
	size_t i = 0;
	for(vector<double>::iterator it = probabilities.begin(); it != probabilities.end(); it++)
	{
		d -= *it;
		if(d < 0)
			return i;
		i++;
	}
	GAssert(false); // the probabilities are not normalized
	return probabilities.size() - 1;
}

double GRand::exponential()
{
	return -log(uniform());
}

double GRand::cauchy()
{
	return normal() / normal();
}

int GRand::poisson(double mu)
{
	if(mu <= 0)
		throw Ex("invalid parameter");
	double p = 1.0;
	int n = 0;
	if(mu < 30)
	{
		mu = exp(-mu);
		do {
			p *= uniform();
			n++;
		} while(p >= mu);
		return n - 1;
	}
	else
	{
		double u1, u2, x, y;
		double c = 0.767-3.36 / mu;
		double b = M_PI / sqrt(3.0 * mu);
		double a = b * mu;
		if(c <= 0)
			throw Ex("Error generating Poisson deviate");
		double k = log(c) - mu - log(b);
		double ck1 = 0.0;
		double ck2;
		do {
			ck2=0.;
			do {
				u1 = uniform();
				x = (a - log(0.1e-18 + (1.0 - u1) / u1)) / b;
				if(x > -0.5)
					ck2=1.0;
			} while (ck2<0.5);
			n = (int)(x + 0.5);
			u2 = uniform();
			y = 1 + exp(a - b * x);
			ck1 = a - b * x + log(.1e-18 + u2/(y * y));
#ifdef WINDOWS
			ck2 = k + n * log(.1e-18 + mu) - GMath::logGamma(n + 1.0);
#else
			ck2 = k + n * log(.1e-18 + mu) - lgamma(n + 1.0);
#endif
			if(ck1 <= ck2)
				ck1 = 1.0;
		} while (ck1 < 0.5);
		return n;
	}
}

double GRand::gamma(double alpha)
{
	double x;
	if(alpha <= 0)
		throw Ex("invalid parameter");
	if(alpha == 1)
		return exponential();
	else if(alpha < 1)
	{
		double aa = (alpha + M_E) / M_E;
		double r1, r2;
		do {
			r1 = uniform();
			r2 = uniform();
			if(r1 > 1.0 / aa)
			{
				x = -log(aa * (1.0 - r1) / alpha);
				if(r2 < pow(x, (alpha - 1.0)))
					return x;
			}
			else
			{
				x = pow((aa * r1), (1.0 / alpha));
				if(r2 < exp(-x))
					return x;
			}
		} while(r2 < 2);
	}
	else
	{
		double c1 = alpha-1;
		double c2 = (alpha - 1.0 / (6.0 * alpha)) / c1;
		double c3 = 2.0 / c1;
		double c4 = c3 + 2.0;
		double c5 = 1.0 / sqrt(alpha);
		double r1, r2;
		do {
			do {
				r1 = uniform();
				r2 = uniform();
				if(alpha > 2.5)
					r1 = r2 + c5 * (1.0 - 1.86 * r1);
			} while(r1 <= 0 || r1 >= 1);
			double w = c2 * r2 / r1;
			if((c3 * r1) + w + (1.0 / w) <= c4)
				return c1 * w;
			if((c3 * log(r1)) - log(w) + w < 1)
				return c1 * w;
		} while(r2 < 2);
	}
	throw Ex("Error making random gamma");
	return 0;
}

double GRand::chiSquare(double t)
{
	return gamma(t / 2.0) * 2.0;
}

size_t GRand::binomial(size_t n, double p)
{
	size_t c = 0;
	for(size_t i = 0; i < n; i++)
	{
		if(uniform() < p)
			c++;
	}
	return c;
}

size_t GRand::binomial_approx(size_t n, double p)
{
	double mean = p * n;
	double dev = sqrt(std::max(0.0, mean * (1.0 - p)));
	return std::min(n, size_t(floor(std::max(0.0, normal() * dev + mean + 0.5))));
}

void GRand::simplex(double* pOutVec, size_t dims)
{
	for(size_t i = 0; i < dims; i++)
		*(pOutVec++) = exponential();
	GVec::sumToOne(pOutVec, dims);
}

double GRand::softImpulse(double s)
{
	double y = uniform();
	return 1.0 / (1.0 + pow(1.0 / y - 1.0, 1.0 / s));
}

double GRand::weibull(double gamma)
{
	if(gamma <= 0)
		throw Ex("invalid parameter");
	return pow(exponential(), (1.0 / gamma));
}

void GRand::dirichlet(double* pOutVec, const double* pParams, int dims)
{
	double* pOut = pOutVec;
	const double* pIn = pParams;
	for(int i = 0; i < dims; i++)
		*(pOut++) = gamma(*(pIn++));
	GVec::sumToOne(pOutVec, dims);
}

double GRand::student(double t)
{
	if(t <= 0)
		throw Ex("invalid parameter");
	return normal() / sqrt(chiSquare(t) / t);
}

int GRand::geometric(double p)
{
	if(p <= 0 || p >= 1)
		throw Ex("invalid parameter");
	return (int)floor(-exponential() / log(1.0 - p));
}

double GRand::f(double t, double u)
{
	if(t <= 0 || u <= 0)
		throw Ex("invalid parameters");
	return chiSquare(t) * u / (t * chiSquare(u));
}

double GRand::logistic()
{
	double y = uniform();
	return log(y) - log(1.0 - y);
}

double GRand::logNormal(double mean, double dev)
{
	return exp(normal() * dev + mean);
}

double GRand::beta(double alpha, double beta)
{
	if(alpha <= 0 || beta <= 0)
		throw Ex("invalid parameters");
	double r = gamma(alpha);
	return r / (r + gamma(beta));
}

void GRand::spherical(double* pOutVec, size_t dims)
{
	double* pEl = pOutVec;
	for(size_t i = 0; i < dims; i++)
		*(pEl++) = normal();
	GVec::safeNormalize(pOutVec, dims, this);
}

void GRand::spherical_volume(double* pOutVec, size_t dims)
{
	spherical(pOutVec, dims);
	GVec::multiply(pOutVec, pow(uniform(), 1.0 / dims), dims);
}

void GRand::cubical(double* pOutVec, size_t dims)
{
	double* pEl = pOutVec;
	for(size_t i = 0; i < dims; i++)
		*(pEl++) = uniform();
}

#ifndef MIN_PREDICT
GRand& GRand::global(){
	static GRand rng(0);
	static bool initialized = false;
	if(!initialized){
		std::time_t t = std::time(NULL);
#ifdef WINDOWS
		int pid = _getpid();
#else
		pid_t pid = getpid();
#endif
		uint64_t seed = (~ reverseBits((unsigned)t))+pid;
		rng.setSeed(seed);
	}
	return rng;
}

#define TEST_BIT_HIST_ITERS 100000
void GRand_testBitHistogram()
{
	GRand prng(0);
	size_t counts[64];
	for(size_t i = 0; i < 64; i++)
		counts[i] = 0;
	for(size_t i = 0; i < TEST_BIT_HIST_ITERS; i++)
	{
		unsigned long long n = prng.next();
		for(size_t j = 0; j < 64; j++)
		{
			if(n & (1ull << j))
				counts[j]++;
		}
	}
	for(size_t i = 0; i < 64; i++)
	{
		double d = (double)counts[i] / TEST_BIT_HIST_ITERS;
		if(std::abs(d - 0.5) > 0.01)
			throw Ex("Poor bit-wise histogram");
	}
}

#define GRANDUINT_TEST_PRELUDE_SIZE 10000
#define GRANDUINT_TEST_PERIOD_SIZE 100000

void GRand_testSpeed()
{
	// Compare speed with rand(). (Be sure to build optimized, or else the results aren't very meaningful.)
	int i;
	double t1,t2,t3;
	t1 = GTime::seconds();
	for(i = 0; i < 100000000; i++)
		rand();
	t2 = GTime::seconds();
	GRand gr(0);
	for(i = 0; i < 100000000; i++)
		gr.next();
	t3 = GTime::seconds();
	double randtime = t2 - t1;
	double grandtime = t3 - t2;
	if(randtime < grandtime)
		throw Ex("rand is faster than GRand");
}

void GRand_testRange()
{
	// Make sure random doubles are within range
	GRand r(0);
	double min = 0.5;
	double max = 0.5;
	for(int n = 0; n < 100000; n++)
	{
		double d = r.uniform();
		min = std::min(min, d);
		max = std::max(max, d);
	}
	if(min < 0.0 || max > 1.0)
		throw Ex("Out of range");
	if(std::abs(min - 0.0) > 0.001)
		throw Ex("poor min");
	if(std::abs(max - 1.0) > 0.001)
		throw Ex("poor max");
}

void GRand_test_determinism()
{
	static unsigned int expected[] = { 1917992778u, 1993289697u, 632158740u, 2429171905u, 22912061u, 2753716493u, 316743267u, 3124664097u, 382509932u, 191925157u, 2298038407u, 246378453u, 1806533664u, 2162141831u, 2260504017u, 3155449906u };
	GRand rand(12345678);
	for(size_t i = 0; i < 16; i++)
	{
		if((unsigned int)rand.next() != expected[i])
			throw Ex("failed");
	}
}

// static
void GRand::test()
{
	GRand_testBitHistogram();

	// Test cycle length
	int n;
	for(n = 0; n < 100; n++)
	{
		GRand r(n);
		for(uint64_t j = 0; j < GRANDUINT_TEST_PRELUDE_SIZE; j++)
			r.next();
		uint64_t startA = r.m_a;
		uint64_t startB = r.m_b;
		r.next();
		for(uint64_t j = 0; j < GRANDUINT_TEST_PERIOD_SIZE; j++)
		{
			if(r.m_a == startA || r.m_b == startB)
				throw Ex("Loop too small");
			r.next();
		}
	}

	GRand_testRange();
	GRand_test_determinism();
	//GRand_testSpeed();
	// todo: add a test for correlations
}
#endif // MIN_PREDICT


/* initializes mt[NN] with a seed */
void GRandMersenneTwister::init_genrand64(uint64_t seed)
{
	mt[0] = seed;
	for (mti=1; mti<NN; mti++) 
		mt[mti] =  (6364136223846793005ULL * (mt[mti-1] ^ (mt[mti-1] >> 62)) + mti);
}
	
/* generates a random number on [0, 2^64-1]-interval */
uint64_t GRandMersenneTwister::genrand64_int64(void)
{
	unsigned int i;
	uint64_t x;
  
	if (mti >= NN) { /* generate NN words at one time */
		
		for (i=0;i<NN-MM;i++) {
			x = (mt[i]&UM)|(mt[i+1]&LM);
			mt[i] = mt[i+MM] ^ (x>>1) ^ mag01[(int)(x&1ULL)];
		}
		for (;i<NN-1;i++) {
			x = (mt[i]&UM)|(mt[i+1]&LM);
			mt[i] = mt[i+(MM-NN)] ^ (x>>1) ^ mag01[(int)(x&1ULL)];
		}
		x = (mt[NN-1]&UM)|(mt[0]&LM);
		mt[NN-1] = mt[MM-1] ^ (x>>1) ^ mag01[(int)(x&1ULL)];
		
		mti = 0;
	}
	
	x = mt[mti++];
	
	x ^= (x >> 29) & 0x5555555555555555ULL;
	x ^= (x << 17) & 0x71D67FFFEDA60000ULL;
	x ^= (x << 37) & 0xFFF7EEE000000000ULL;
	x ^= (x >> 43);
	
	return x;
}

void GRandMersenneTwister::init_by_array64(uint64_t init_key[],
																					 uint64_t key_length)
{
	uint64_t i, j, k;
	init_genrand64(19650218ULL);
	i=1; j=0;
	k = (NN>key_length ? NN : key_length);
	for (; k; k--) {
		mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 62)) * 3935559000370003845ULL))
			+ init_key[j] + j; /* non linear */
		i++; j++;
		if (i>=NN) { mt[0] = mt[NN-1]; i=1; }
		if (j>=key_length) j=0;
	}
	for (k=NN-1; k; k--) {
		mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 62)) * 2862933555777941757ULL))
			- i; /* non linear */
		i++;
		if (i>=NN) { mt[0] = mt[NN-1]; i=1; }
	}
	
	mt[0] = 1ULL << 63; /* MSB is 1; assuring non-zero initial array */ 
}



#ifndef MIN_PREDICT
namespace{
	///The expected values produced by the integer portion of the test
	///code included with the original mersenne twister code.  There are
	///1000 values in this array.
	const uint64_t uint64MTTestValues[1000]={
		7266447313870364031ull,  4946485549665804864ull,  16945909448695747420ull, 
		16394063075524226720ull, 4873882236456199058ull,  14877448043947020171ull, 
		6740343660852211943ull,  13857871200353263164ull, 5249110015610582907ull, 
		10205081126064480383ull, 1235879089597390050ull,  17320312680810499042ull, 
		16489141110565194782ull, 8942268601720066061ull,  13520575722002588570ull, 
		14226945236717732373ull, 9383926873555417063ull,  15690281668532552105ull, 
		11510704754157191257ull, 15864264574919463609ull, 6489677788245343319ull, 
		5112602299894754389ull,  10828930062652518694ull, 15942305434158995996ull, 
		15445717675088218264ull, 4764500002345775851ull,  14673753115101942098ull, 
		236502320419669032ull,   13670483975188204088ull, 14931360615268175698ull, 
		8904234204977263924ull,  12836915408046564963ull, 12120302420213647524ull, 
		15755110976537356441ull, 5405758943702519480ull,  10951858968426898805ull, 
		17251681303478610375ull, 4144140664012008120ull,  18286145806977825275ull, 
		13075804672185204371ull, 10831805955733617705ull, 6172975950399619139ull, 
		12837097014497293886ull, 12903857913610213846ull, 560691676108914154ull, 
		1074659097419704618ull,  14266121283820281686ull, 11696403736022963346ull, 
		13383246710985227247ull, 7132746073714321322ull,  10608108217231874211ull, 
		9027884570906061560ull,  12893913769120703138ull, 15675160838921962454ull, 
		2511068401785704737ull,  14483183001716371453ull, 3774730664208216065ull, 
		5083371700846102796ull,  9583498264570933637ull,  17119870085051257224ull, 
		5217910858257235075ull,  10612176809475689857ull, 1924700483125896976ull, 
		7171619684536160599ull,  10949279256701751503ull, 15596196964072664893ull, 
		14097948002655599357ull, 615821766635933047ull,   5636498760852923045ull, 
		17618792803942051220ull, 580805356741162327ull,   425267967796817241ull, 
		8381470634608387938ull,  13212228678420887626ull, 16993060308636741960ull, 
		957923366004347591ull,   6210242862396777185ull,  1012818702180800310ull, 
		15299383925974515757ull, 17501832009465945633ull, 17453794942891241229ull, 
		15807805462076484491ull, 8407189590930420827ull,  974125122787311712ull, 
		1861591264068118966ull,  997568339582634050ull,   18046771844467391493ull, 
		17981867688435687790ull, 3809841506498447207ull,  9460108917638135678ull, 
		16172980638639374310ull, 958022432077424298ull,   4393365126459778813ull, 
		13408683141069553686ull, 13900005529547645957ull, 15773550354402817866ull, 
		16475327524349230602ull, 6260298154874769264ull,  12224576659776460914ull, 
		6405294864092763507ull,  7585484664713203306ull,  5187641382818981381ull, 
		12435998400285353380ull, 13554353441017344755ull, 646091557254529188ull, 
		11393747116974949255ull, 16797249248413342857ull, 15713519023537495495ull, 
		12823504709579858843ull, 4738086532119935073ull,  4429068783387643752ull, 
		585582692562183870ull,   1048280754023674130ull,  6788940719869959076ull, 
		11670856244972073775ull, 2488756775360218862ull,  2061695363573180185ull, 
		6884655301895085032ull,  3566345954323888697ull,  12784319933059041817ull, 
		4772468691551857254ull,  6864898938209826895ull,  7198730565322227090ull, 
		2452224231472687253ull,  13424792606032445807ull, 10827695224855383989ull, 
		11016608897122070904ull, 14683280565151378358ull, 7077866519618824360ull, 
		17487079941198422333ull, 3956319990205097495ull,  5804870313319323478ull, 
		8017203611194497730ull,  3310931575584983808ull,  5009341981771541845ull, 
		6930001938490791874ull,  14415278059151389495ull, 11001114762641844083ull, 
		6715939435439735925ull,  411419160297131328ull,   4522402260441335284ull, 
		3381955501804126859ull,  15935778656111987797ull, 4345051260540166684ull, 
		13978444093099579683ull, 9219789505504949817ull,  9245142924137529075ull, 
		11628184459157386459ull, 7242398879359936370ull,  8511401943157540109ull, 
		11948130810477009827ull, 6865450671488705049ull,  13965005347172621081ull, 
		15956599226522058336ull, 7737868921014130584ull,  2107342503741411693ull, 
		15818996300425101108ull, 16399939197527488760ull, 13971145494081508107ull, 
		3910681448359868691ull,  4249175367970221090ull,  9735751321242454020ull, 
		12418107929362160460ull, 241792245481991138ull,   5806488997649497146ull, 
		10724207982663648949ull, 1121862814449214435ull,  1326996977123564236ull, 
		4902706567834759475ull,  12782714623891689967ull, 7306216312942796257ull, 
		15681656478863766664ull, 957364844878149318ull,   5651946387216554503ull, 
		8197027112357634782ull,  6302075516351125977ull,  13454588464089597862ull, 
		15638309200463515550ull, 10116604639722073476ull, 12052913535387714920ull, 
		2889379661594013754ull,  15383926144832314187ull, 7841953313015471731ull, 
		17310575136995821873ull, 9820021961316981626ull,  15319619724109527290ull, 
		15349724127275899898ull, 10511508162402504492ull, 6289553862380300393ull, 
		15046218882019267110ull, 11772020174577005930ull, 3537640779967351792ull, 
		6801855569284252424ull,  17687268231192623388ull, 12968358613633237218ull, 
		1429775571144180123ull,  10427377732172208413ull, 12155566091986788996ull, 
		16465954421598296115ull, 12710429690464359999ull, 9547226351541565595ull, 
		12156624891403410342ull, 2985938688676214686ull,  18066917785985010959ull, 
		5975570403614438776ull,  11541343163022500560ull, 11115388652389704592ull, 
		9499328389494710074ull,  9247163036769651820ull,  3688303938005101774ull, 
		2210483654336887556ull,  15458161910089693228ull, 6558785204455557683ull, 
		1288373156735958118ull,  18433986059948829624ull, 3435082195390932486ull, 
		16822351800343061990ull, 3120532877336962310ull,  16681785111062885568ull, 
		7835551710041302304ull,  2612798015018627203ull,  15083279177152657491ull, 
		6591467229462292195ull,  10592706450534565444ull, 7438147750787157163ull, 
		323186165595851698ull,   7444710627467609883ull,  8473714411329896576ull, 
		2782675857700189492ull,  3383567662400128329ull,  3200233909833521327ull, 
		12897601280285604448ull, 3612068790453735040ull,  8324209243736219497ull, 
		15789570356497723463ull, 1083312926512215996ull,  4797349136059339390ull, 
		5556729349871544986ull,  18266943104929747076ull, 1620389818516182276ull, 
		172225355691600141ull,   3034352936522087096ull,  1266779576738385285ull, 
		3906668377244742888ull,  6961783143042492788ull,  17159706887321247572ull, 
		4676208075243319061ull,  10315634697142985816ull, 13435140047933251189ull, 
		716076639492622016ull,   13847954035438697558ull, 7195811275139178570ull, 
		10815312636510328870ull, 6214164734784158515ull,  16412194511839921544ull, 
		3862249798930641332ull,  1005482699535576005ull,  4644542796609371301ull, 
		17600091057367987283ull, 4209958422564632034ull,  5419285945389823940ull, 
		11453701547564354601ull, 9951588026679380114ull,  7425168333159839689ull, 
		8436306210125134906ull,  11216615872596820107ull, 3681345096403933680ull, 
		5770016989916553752ull,  11102855936150871733ull, 11187980892339693935ull, 
		396336430216428875ull,   6384853777489155236ull,  7551613839184151117ull, 
		16527062023276943109ull, 13429850429024956898ull, 9901753960477271766ull, 
		9731501992702612259ull,  5217575797614661659ull,  10311708346636548706ull, 
		15111747519735330483ull, 4353415295139137513ull,  1845293119018433391ull, 
		11952006873430493561ull, 3531972641585683893ull,  16852246477648409827ull, 
		15956854822143321380ull, 12314609993579474774ull, 16763911684844598963ull, 
		16392145690385382634ull, 1545507136970403756ull,  17771199061862790062ull, 
		12121348462972638971ull, 12613068545148305776ull, 954203144844315208ull, 
		1257976447679270605ull,  3664184785462160180ull,  2747964788443845091ull, 
		15895917007470512307ull, 15552935765724302120ull, 16366915862261682626ull, 
		8385468783684865323ull,  10745343827145102946ull, 2485742734157099909ull, 
		916246281077683950ull,   15214206653637466707ull, 12895483149474345798ull, 
		1079510114301747843ull,  10718876134480663664ull, 1259990987526807294ull, 
		8326303777037206221ull,  14104661172014248293ull, 15531278677382192198ull, 
		3874303698666230242ull,  3611366553819264523ull,  1358753803061653874ull, 
		1552102816982246938ull,  14492630642488100979ull, 15001394966632908727ull, 
		2273140352787320862ull,  17843678642369606172ull, 2903980458593894032ull, 
		16971437123015263604ull, 12969653681729206264ull, 3593636458822318001ull, 
		9719758956915223015ull,  7437601263394568346ull,  3327758049015164431ull, 
		17851524109089292731ull, 14769614194455139039ull, 8017093497335662337ull, 
		12026985381690317404ull, 739616144640253634ull,   15535375191850690266ull, 
		2418267053891303448ull,  15314073759564095878ull, 10333316143274529509ull, 
		16565481511572123421ull, 16317667579273275294ull, 13991958187675987741ull, 
		3753596784796798785ull,  9078249094693663275ull,  8459506356724650587ull, 
		12579909555010529099ull, 7827737296967050903ull,  5489801927693999341ull, 
		10995988997350541459ull, 14721747867313883304ull, 7915884580303296560ull, 
		4105766302083365910ull,  12455549072515054554ull, 13602111324515032467ull, 
		5205971628932290989ull,  5034622965420036444ull,  9134927878875794005ull, 
		11319873529597990213ull, 14815445109496752058ull, 2266601052460299470ull, 
		5696993487088103383ull,  6540200741841280242ull,  6631495948031875490ull, 
		5328340585170897740ull,  17897267040961463930ull, 9030000260502624168ull, 
		14285709137129830926ull, 12854071997824681544ull, 15408328651008978682ull, 
		1063314403033437073ull,  13765209628446252802ull, 242013711116865605ull, 
		4772374239432528212ull,  2515855479965038648ull,  5872624715703151235ull, 
		14237704570091006662ull, 678604024776645862ull,   12329607334079533339ull, 
		17570877682732917020ull, 2695443415284373666ull,  4312672841405514468ull, 
		6454343485137106900ull,  8425658828390111343ull,  16335501385875554899ull, 
		5551095603809016713ull,  11781094401885925035ull, 9395557946368382509ull, 
		9765123360948816956ull,  18107191819981188154ull, 16049267500594757404ull, 
		16349966108299794199ull, 1040405303135858246ull,  2366386386131378192ull, 
		223761048139910454ull,   15375217587047847934ull, 15231693398695187454ull, 
		12916726640254571028ull, 8878036960829635584ull,  1626201782473074365ull, 
		5758998126998248293ull,  18077917959300292758ull, 10585588923088536745ull, 
		15072345664541731497ull, 3559348759319842667ull,  12744591691872202375ull, 
		2388494115860283059ull,  6414691845696331748ull,  3069528498807764495ull, 
		8737958486926519702ull,  18059264986425101074ull, 3139684427605102737ull, 
		12378931902986734693ull, 410666675039477949ull,   12139894855769838924ull, 
		5780722552400398675ull,  7039346665375142557ull,  3020733445712569008ull, 
		2612305843503943561ull,  13651771214166527665ull, 16478681918975800939ull, 
		566088527565499576ull,   4715785502295754870ull,  6957318344287196220ull, 
		11645756868405128885ull, 13139951104358618000ull, 17650948583490040612ull, 
		18168787973649736637ull, 5486282999836125542ull,  6122201977153895166ull, 
		17324241605502052782ull, 10063523107521105867ull, 17537430712468011382ull, 
		10828407533637104262ull, 10294139354198325113ull, 12557151830240236401ull, 
		16673044307512640231ull, 10918020421896090419ull, 11077531235278014145ull, 
		5499571814940871256ull,  2334252435740638702ull,  18177461912527387031ull, 
		2000007376901262542ull,  7968425560071444214ull,  1472650787501520648ull, 
		3115849849651526279ull,  7980970700139577536ull,  12153253535907642097ull, 
		8109716914843248719ull,  3154976533165008908ull,  5553369513523832559ull, 
		10345792701798576501ull, 3677445364544507875ull,  10637177623943913351ull, 
		7380255087060498096ull,  14479400372337014801ull, 15381362583330700960ull, 
		204531043189704802ull,   13699106540959723942ull, 3817903465872254783ull, 
		10972364467110284934ull, 2701394334530963810ull,  2931625600749229147ull, 
		16428252083632828910ull, 11873166501966812913ull, 5566810080537233762ull, 
		7840617383807795056ull,  10699413880206684652ull, 18259119259617231436ull, 
		10332714341486317526ull, 10137911902863059694ull, 669146221352346842ull, 
		8373571610024623455ull,  10620002450820868661ull, 12220730820779815970ull, 
		5902974968095412898ull,  7931010481705150841ull,  16413777368097063650ull, 
		11273457888324769727ull, 13719113891065284171ull, 8327795098009702553ull, 
		10333342364827584837ull, 6202832891413866653ull,  9137034567886143162ull, 
		14514450826524340059ull, 473610156015331016ull,   813689571029117640ull, 
		13776316799690285717ull, 10429708855338427756ull, 8995290140880620858ull, 
		2320123852041754384ull,  8082864073645003641ull,  6961777411740398590ull, 
		10008644283003991179ull, 3239064015890722333ull,  16762634970725218787ull, 
		16467281536733948427ull, 10563290046315192938ull, 5108560603794851559ull, 
		15121667220761532906ull, 14155440077372845941ull, 10050536352394623377ull, 
		15474881667376037792ull, 3448088038819200619ull,  3692020001240358871ull, 
		6444847992258394902ull,  8687650838094264665ull,  3028124591188972359ull, 
		16945232313401161629ull, 15547830510283682816ull, 3982930188609442149ull, 
		14270781928849894661ull, 13768475593433447867ull, 13815150225221307677ull, 
		8502397232429564693ull,  718377350715476994ull,   7459266877697905475ull, 
		8353375565171101521ull,  7807281661994435472ull,  16924127046922196149ull, 
		10157812396471387805ull, 2519858716882670232ull,  7384148884750265792ull, 
		8077153156180046901ull,  3499231286164597752ull,  2700106282881469611ull, 
		14679824700835879737ull, 14188324938219126828ull, 3016120398601032793ull, 
		10858152824243889420ull, 9412371965669250534ull,  4857522662584941069ull, 
		984331743838900386ull,   4094160040294753142ull,  2368635764350388458ull, 
		15101240511397838657ull, 15584415763303953578ull, 7831857200208015446ull, 
		1952643641639729063ull,  4184323302594028609ull,  16795120381104846695ull, 
		3541559381538365280ull,  15408472870896842474ull, 5628362450757896366ull, 
		16277348886873708846ull, 12437047172652330846ull, 10172715019035948149ull, 
		1999700669649752791ull,  6217957085626135027ull,  11220551167830336823ull, 
		16478747645632411810ull, 5437280487207382147ull,  11382378739613087836ull, 
		15866932785489521505ull, 5502694314775516684ull,  16440179278067648435ull, 
		15510104554374162846ull, 15722061259110909195ull, 10760687291786964354ull, 
		10736868329920212671ull, 4166148127664495614ull,  14303518358120527892ull, 
		9122250801678898571ull,  10028508179936801946ull, 216630713752669403ull, 
		10655207865433859491ull, 4041437116174699233ull,  6280982262534375348ull, 
		297501356638818866ull,   13976146806363377485ull, 13752396481560145603ull, 
		11472199956603637419ull, 16393728429143900496ull, 14752844047515986640ull, 
		1524477318846038424ull,  6596889774254235440ull,  1591982099532234960ull, 
		8065146456116391065ull,  3964696017750868345ull,  17040425970526664920ull, 
		11511165586176539991ull, 3443401252003315103ull,  16314977947073778249ull, 
		16860120454903458341ull, 5370503221561340846ull,  15362920279125264094ull, 
		2822458124714999779ull,  14575378304387898337ull, 9689406052675046032ull, 
		2872149351415175149ull,  13019620945255883050ull, 14929026760148695825ull, 
		8503417349692327218ull,  9677798905341573754ull,  828949921821462483ull, 
		16110482368362750196ull, 15794218816553655671ull, 14942910774764855088ull, 
		12026350906243760195ull, 13610867176871462505ull, 18324536557697872582ull, 
		2658962269666727629ull,  327225403251576027ull,   9207535177029277544ull, 
		8744129291351887858ull,  6129603385168921503ull,  18385497655031085907ull, 
		13024478718952333892ull, 14547683159720717167ull, 5932119629366981711ull, 
		325385464632594563ull,   3559879386019806291ull,  6629264948665231298ull, 
		14358245326238118181ull, 15662449672706340765ull, 13975503159145803297ull, 
		3609534220891499022ull,  4224273587485638227ull,  9274084767162416370ull, 
		13156843921244091998ull, 18284750575626858789ull, 14664767920489118779ull, 
		11292057742031803221ull, 13919998707305829132ull, 14473305049457001422ull, 
		9696877879685767807ull,  1406758246007973837ull,  2429517644459056881ull, 
		14361215588101587430ull, 11386164476149757528ull, 10474116023593331839ull, 
		2921165656527786564ull,  15604610369733358953ull, 12955027028676000544ull, 
		10314281035410779907ull, 3167047178514709947ull,  1088721329408346700ull, 
		17930425515478182741ull, 7466411836095405617ull,  15534027454610690575ull, 
		10879629128927506091ull, 11502219301371200635ull, 13915106894453889418ull, 
		4226784327815861027ull,  12335222183627106346ull, 3648499746356007767ull, 
		18441388887898023393ull, 18117929843327093625ull, 4237736098094830438ull, 
		14229123019768296655ull, 3930112058127932690ull,  12663879236019645778ull, 
		9281161952002617309ull,  4978473890680876319ull,  845759387067546611ull, 
		1386164484606776333ull,  8008554770639925512ull,  11159581016793288971ull, 
		18065390393740782906ull, 17647985458967631018ull, 9092379465737744314ull, 
		2914678236848656327ull,  4376066698447630270ull,  16057186499919087528ull, 
		3031333261848790078ull,  2926746602873431597ull,  7931945763526885287ull, 
		147649915388326849ull,   15801792398814946230ull, 5265900391686545347ull, 
		16173686275871890830ull, 7562781050481886043ull,  5853506575839330404ull, 
		14957980734704564792ull, 10944286556353523404ull, 1783009880614150597ull, 
		9529762028588888983ull,  822992871011696119ull,   2130074274744257510ull, 
		8000279549284809219ull,  3514744284158856431ull,  128770032569293263ull, 
		3737367602618100572ull,  16364836605077998543ull, 783266423471782696ull, 
		4569418252658970391ull,  11093950688157406886ull, 14888808512267628166ull, 
		4217786261273670948ull,  17047486076688645713ull, 14133826721458860485ull, 
		17539744882220127106ull, 12394675039129853905ull, 5757634999463277090ull, 
		9621947619435861331ull,  1182210208559436772ull,  14603391040490913939ull, 
		17481976703660945893ull, 14063388816234683976ull, 2046622692581829572ull, 
		8294969799792017441ull,  5293778434844788058ull,  17976364049306763808ull, 
		399482430848083948ull,   16495545010129798933ull, 15241340958282367519ull, 
		989828753826900814ull,   17616558773874893537ull, 2471817920909589004ull, 
		11764082277667899978ull, 9618755269550400950ull,  1240014743757147125ull, 
		1887649378641563002ull,  1842982574728131416ull,  13243531042427194002ull, 
		7688268125537013927ull,  3080422097287486736ull,  2562894809975407783ull, 
		12428984115620094788ull, 1355581933694478148ull,  9895969242586224966ull, 
		8628445623963160889ull,  4298916726468199239ull,  12773165416305557280ull, 
		5240726258301567487ull,  4975412836403427561ull,  1842172398579595303ull, 
		7812151462958058676ull,  17974510987263071769ull, 14980707022065991200ull, 
		18294903201142729875ull, 12911672684850242753ull, 8979482998667235743ull, 
		16808468362384462073ull, 5981317232108359798ull,  12373702800369335100ull, 
		16119707581920094765ull, 2782738549717633602ull,  15454155188515389391ull, 
		16495638000603654629ull, 16348757069342790497ull, 7769562861984504567ull, 
		17504300515449231559ull, 5557710032938318996ull,  11846125204788401203ull, 
		13957316349928882624ull, 2738350683717432043ull,  15738068448047700954ull, 
		6224714837294524999ull,  6081930777706411111ull,  11366312928059597928ull, 
		4355315799925031482ull,  12393324728734964015ull, 15277140291994338591ull, 
		1406052433297386355ull,  15859448364509213398ull, 1672805458341158435ull, 
		2926095111610982994ull,  11056431822276774455ull, 12083767323511977430ull, 
		3296968762229741153ull,  12312076899982286460ull, 17769284994682227273ull, 
		15349428916826953443ull, 1056147296359223910ull,  18305757538706977431ull, 
		6214378374180465222ull,  14279648441175008454ull, 17791306410319136644ull, 
		956593013486324072ull,   2921235772936241950ull,  10002890515925652606ull, 
		10399654693663712506ull, 6446247931049971441ull,  6380465770144534958ull, 
		11439178472613251620ull, 10131486500045494660ull, 3692642123868351947ull, 
		10972816599561388940ull, 4931112976348785580ull,  8213967169213816566ull, 
		15336469859637867841ull, 15026830342847689383ull, 7524668622380765825ull, 
		17309937346758783807ull, 372780684412666438ull,   5642417144539399955ull, 
		18303842993081194577ull, 11085303253831702827ull, 15658163165983586950ull, 
		8517521928922081563ull,  16091186344159989860ull, 17614656488010863910ull, 
		4736067146481515156ull,  13449945221374241354ull, 17755469346196579408ull, 
		13300502638545717375ull, 6611828134763118043ull,  14177591906740276597ull, 
		9340430243077460347ull,  7499765399826404087ull,  3409518087967832469ull, 
		9013253864026602045ull,  4444307427984430192ull,  3729283608700519712ull, 
		13642048880719588383ull, 16486557958022946240ull, 2996465014991157904ull, 
		10020049344596426576ull, 12302485648009883778ull, 8492591321344423126ull, 
		17407986443716172520ull, 10530482934957373052ull, 15740662350540828750ull, 
		1790629986901049436ull,  6305948377669917188ull,  15092985352503125323ull, 
		928505047232899787ull,   14404651977039851607ull, 7564177565277805597ull, 
		3411236815351677870ull,  7752718145953236134ull,  12315979971311483798ull, 
		12477729506691004724ull, 14654956300924793305ull, 6689803038918974388ull, 
		1540738812233000153ull,  13508351811701989957ull, 15864432023192136053ull, 
		7990997967273843917ull,  7424300239290765161ull,  39585249496300263ull, 
		3877436595063283319ull,  10710642254398044448ull, 4653804418844456375ull, 
		1232267496410380283ull,  3690525514009038824ull,  15459770765077428485ull, 
		13240346522153894145ull, 5674964360688390624ull,  16973644653010587289ull, 
		15924280764204855206ull, 15196708627253442662ull, 17596174821341373274ull, 
		16196745023027393691ull, 6980050627399795351ull,  17582264380857746637ull, 
		18170372407506856324ull, 12108126025631005514ull, 15687749089493373169ull, 
		5814107289258228434ull,  9381977959648494876ull,  15895601183088112734ull, 
		16267869075651604263ull, 15228381979765852785ull, 11949618678312581999ull, 
		4545324791131029438ull,  582725409406225185ull,   15282520250746126790ull, 
		14758446535973412711ull, 7605613563088071833ull,  1111140641057375915ull, 
		5364843095234852245ull,  218335432181198977ull,   4891472444796201742ull, 
		4564628942836375772ull,  15500501278323817088ull, 4913946328556108657ull, 
		2684786251736694229ull,  12090498456116310122ull, 5310885782157038567ull, 
		5032788439854011923ull,  12627401038822728242ull, 11869662610126430929ull, 
		17650156853043540226ull, 12126672500118808436ull, 10437658933435653256ull, 
		13133995470637873311ull, 4601324715591152820ull,  1874350460376708372ull, 
		5808688626286061164ull,  13777088437302430376ull, 5018451954762213522ull, 
		2588296738534474754ull,  5503414509154170711ull,  5230497186769951796ull, 
		13261090710400573914ull, 8515217303152165705ull,  11074538219737365303ull, 
		15481562385740613213ull, 12705484409881007350ull, 14221931471178549498ull, 
		12905633420087112297ull, 17337759164357146506ull, 14081997515778175224ull, 
		17384320185513122939ull, 7131793076779216692ull,  17483217190312403109ull, 
		900692047897995877ull,   14723287313048560400ull, 6132094372965340305ull, 
		7572797575350925726ull,  12725160700431903514ull, 380860122911632449ull, 
		1900504978569024571ull,  8423729759529914138ull,  7305587201606052334ull, 
		12446871355267313320ull, 4615812356515386206ull,  3361817115406652303ull, 
		17690418922000878428ull, 14632214537567910559ull, 2709702289926174775ull, 
		3459675155951086144ull,  7788364399926538150ull,  16043992474431955950ull, 
		15830963823784930267ull, 4216893617835797954ull,  538159724689093771ull, 
		16029152738918251363ull, 14444848757576686696ull, 12941757045272633696ull, 
		10900480525147953314ull, 12547307449905859302ull, 16001571796892398181ull, 
		407942194622690676ull,   13873235372903944444ull, 18071603799493008777ull, 
		1015646077646778622ull,  9387605808959554815ull,  11566702442022019410ull, 
		7061722181092883183ull,  2629032108249254109ull,  5271820053177594520ull, 
		12640880742139693547ull, 10098688629735675775ull, 5716304472850923064ull, 
		3312674502353063071ull,  7295926377425759633ull,  833281439103466115ull, 
		16316743519466861667ull, 9912050326606348167ull,  11651133878100804242ull, 
		18026798122431692459ull, 6157758321723692663ull,  4856021830695749349ull, 
		7074321707293278978ull,  10748097797809573561ull, 2949954440753264783ull, 
		9813922580940661152ull,  9949237950172138336ull,  15643982711269455885ull, 
		16078663425810239127ull, 12508044395364228880ull, 12920301578340189344ull, 
		15368071871011048915ull, 1610400750626363239ull,  11994736084146033126ull, 
		6042574085746186088ull,  4154587549267685807ull,  15915752367312946034ull, 
		1191196620621769193ull,  467437822242538360ull,   2836463788873877488ull, 
		10476401302029164984ull, 1716169985450737419ull,  5327734953288310341ull, 
		3994170067185955262ull,  884431883768190063ull,   11019001754831208284ull, 
		14322807384384895215ull, 161011537360955545ull,   1466223959660131656ull, 
		5227048585229497539ull,  12410731857504225031ull, 2142243279080761103ull, 
		17682826799106851430ull, 1792612570704179953ull,  14727410295243056025ull, 
		1459567192481221274ull,  5669760721687603135ull,  17507918443756456845ull, 
		10354471145847018200ull, 10362475129248202288ull, 13143844410150939443ull, 
		6861184673150072028ull,  18396524361124732580ull, 543906666394301875ull, 
		12476817828199026728ull, 11853496871128122868ull, 12747674713108891748ull, 
		7986179867749890282ull,  9158195177777627533ull,  2217320706811118570ull, 
		8631389005200569973ull,  5538133061362648855ull,  3369942850878700758ull, 
		7813559982698427184ull,  509051590411815948ull,   10197035660403006684ull, 
		13004818533162292132ull, 9831652587047067687ull,  7619315254749630976ull, 
		994412663058993407ull
 };

	///The expected values produced by the floating point portion of the
	///test code included with the original mersenne twister code.
	///There are 1000 values in this array.  They are strings because
	///the original test code prints them and truncates themull, so to use
	///their outputull, I need to convert the generated reals to strings
	const char* realMTTestValues[1000]={
		"0.35252031", "0.51052342", "0.79771733", "0.39300273", "0.27216673",
		"0.72151068", "0.43144703", "0.38522290", "0.20270676", "0.58227313",
		"0.80812143", "0.83767297", "0.92401619", "0.84065425", "0.00852052",
		"0.13975395", "0.35250930", "0.71196972", "0.14627395", "0.17775331",
		"0.61046382", "0.49623272", "0.23292425", "0.25038837", "0.04380664",
		"0.43275994", "0.74540936", "0.33830700", "0.68832616", "0.68744230",
		"0.63626548", "0.85932936", "0.37089670", "0.50756304", "0.69925960",
		"0.83481025", "0.09053196", "0.09523253", "0.17783108", "0.78027239",
		"0.70071054", "0.51879252", "0.83027285", "0.92895011", "0.72144803",
		"0.18868644", "0.83655674", "0.20358945", "0.99852143", "0.88340103",
		"0.46729949", "0.96993433", "0.00162682", "0.46829774", "0.59080423",
		"0.54921999", "0.42516462", "0.54952196", "0.99534722", "0.04473888",
		"0.71139235", "0.91881407", "0.33781561", "0.45746234", "0.78292126",
		"0.69206723", "0.66175448", "0.07091147", "0.18179208", "0.38168454",
		"0.38819527", "0.42452711", "0.22732724", "0.16191307", "0.36842667",
		"0.13060083", "0.68833248", "0.60498705", "0.19195304", "0.26628584",
		"0.17030858", "0.23892426", "0.38430236", "0.28034283", "0.76069020",
		"0.21560653", "0.78101667", "0.90847812", "0.06467974", "0.18487868",
		"0.23570471", "0.29475460", "0.65563767", "0.10066446", "0.57272419",
		"0.88731391", "0.60650995", "0.96346079", "0.32940100", "0.29977746",
		"0.03798193", "0.18026822", "0.22402746", "0.45480119", "0.98114604",
		"0.25800668", "0.94362433", "0.17901062", "0.36019313", "0.45933644",
		"0.68309457", "0.28175454", "0.00774729", "0.77054527", "0.99723413",
		"0.59807532", "0.10294164", "0.32429228", "0.54928986", "0.18410980",
		"0.08441555", "0.14230333", "0.58892064", "0.94030475", "0.35378784",
		"0.77584320", "0.71222448", "0.83565208", "0.47309248", "0.23810761",
		"0.74408520", "0.08891527", "0.09729786", "0.38377368", "0.05092308",
		"0.69065638", "0.10449489", "0.45050670", "0.92209534", "0.80083714",
		"0.27902692", "0.26897142", "0.50650468", "0.80111472", "0.54590012",
		"0.96406097", "0.63779553", "0.81054357", "0.75369248", "0.47473037",
		"0.89100315", "0.89395984", "0.09985519", "0.34087631", "0.22293557",
		"0.24375510", "0.31764191", "0.04076993", "0.06160830", "0.41333434",
		"0.11883030", "0.04548820", "0.01008040", "0.25336184", "0.07325432",
		"0.49860151", "0.07148695", "0.89483338", "0.87054457", "0.15116809",
		"0.59650469", "0.47487776", "0.43490298", "0.36684681", "0.16470796",
		"0.76865078", "0.42920071", "0.20545481", "0.87615922", "0.80332404",
		"0.36462506", "0.49571309", "0.51904488", "0.15534589", "0.43719893",
		"0.16562157", "0.37290862", "0.91842631", "0.21310523", "0.87849154",
		"0.18532269", "0.81713354", "0.52182344", "0.51845619", "0.96261204",
		"0.18758718", "0.68897600", "0.61484764", "0.46752993", "0.05865458",
		"0.11614359", "0.90386866", "0.45781805", "0.70649579", "0.50917048",
		"0.21210656", "0.97818608", "0.00788342", "0.61375222", "0.67366318",
		"0.24197878", "0.66177985", "0.10463932", "0.67390799", "0.50025262",
		"0.88332650", "0.77966851", "0.13403622", "0.54357114", "0.97664854",
		"0.06540961", "0.24013176", "0.67234032", "0.91347883", "0.35486839",
		"0.87207865", "0.43036581", "0.23652488", "0.81238450", "0.72058432",
		"0.42239916", "0.80265764", "0.03552838", "0.61939480", "0.50972420",
		"0.21053832", "0.59952743", "0.36821802", "0.45659617", "0.12529468",
		"0.76941623", "0.99878168", "0.08602783", "0.81825937", "0.39350710",
		"0.86090923", "0.36090230", "0.75628888", "0.45036982", "0.44602266",
		"0.20595631", "0.62241953", "0.36777732", "0.47523727", "0.50248178",
		"0.73570362", "0.48237781", "0.45590948", "0.73580783", "0.96403851",
		"0.94586342", "0.48819868", "0.48102038", "0.94618182", "0.90279924",
		"0.78396650", "0.85182389", "0.92149394", "0.32679198", "0.83554856",
		"0.28320609", "0.34598409", "0.82090005", "0.40177958", "0.38888785",
		"0.77873931", "0.23297931", "0.75329335", "0.30770340", "0.71417540",
		"0.68939065", "0.36577776", "0.50784857", "0.50928090", "0.02552055",
		"0.85999075", "0.26692089", "0.01402799", "0.67550392", "0.48305605",
		"0.74608351", "0.63408891", "0.58904230", "0.44337996", "0.42174728",
		"0.74041679", "0.72719148", "0.19801992", "0.66263633", "0.10381594",
		"0.32818760", "0.68369661", "0.56076212", "0.68681921", "0.91616269",
		"0.39836106", "0.39685027", "0.97507945", "0.91010563", "0.27447360",
		"0.95538357", "0.76758522", "0.60091060", "0.37734461", "0.82948248",
		"0.06598078", "0.50147615", "0.08417763", "0.18910044", "0.51661735",
		"0.55011011", "0.64888175", "0.82986845", "0.15126656", "0.92649390",
		"0.25494941", "0.73275293", "0.94184393", "0.84755226", "0.45921936",
		"0.72934054", "0.43722403", "0.34305596", "0.10827860", "0.29026676",
		"0.01935431", "0.46668573", "0.83247509", "0.26349603", "0.01938542",
		"0.43222250", "0.18109983", "0.29337450", "0.16721917", "0.94751650",
		"0.67795254", "0.56666228", "0.20699452", "0.23247262", "0.19138610",
		"0.73495506", "0.85893600", "0.83411526", "0.93689655", "0.91804752",
		"0.99352333", "0.03207550", "0.28386071", "0.48029543", "0.18736013",
		"0.31736452", "0.72542230", "0.57530912", "0.04229918", "0.84798296",
		"0.21886935", "0.98655615", "0.52243102", "0.22611020", "0.42975741",
		"0.21726739", "0.10912048", "0.96684473", "0.01092456", "0.12461901",
		"0.57989070", "0.39848707", "0.06330277", "0.62826828", "0.01159081",
		"0.23157320", "0.64690912", "0.44876902", "0.04463930", "0.18933780",
		"0.21284518", "0.61363480", "0.67144845", "0.38625586", "0.75719122",
		"0.40361050", "0.26708873", "0.54534727", "0.90174015", "0.58654140",
		"0.44885346", "0.35505544", "0.65317830", "0.26074572", "0.39472912",
		"0.54366914", "0.75020660", "0.76113614", "0.24595582", "0.03941247",
		"0.60356153", "0.23615721", "0.01603475", "0.72432457", "0.39837424",
		"0.04195329", "0.81561058", "0.34208440", "0.00513953", "0.92826234",
		"0.11410393", "0.86692030", "0.25238726", "0.98258626", "0.53353856",
		"0.72269001", "0.71850984", "0.66829681", "0.03540769", "0.01676450",
		"0.23557835", "0.78758497", "0.85969589", "0.14673207", "0.28013860",
		"0.17796942", "0.69924087", "0.44663597", "0.62112513", "0.44079883",
		"0.48995231", "0.18411497", "0.18440877", "0.74016388", "0.28845694",
		"0.22969080", "0.76851164", "0.15551473", "0.28980810", "0.40906710",
		"0.47619039", "0.72611392", "0.55802939", "0.69365597", "0.85736313",
		"0.83343150", "0.21324760", "0.45327806", "0.33053855", "0.98198279",
		"0.53279389", "0.76877035", "0.20548656", "0.37065042", "0.59026910",
		"0.67418036", "0.23585843", "0.98156397", "0.27849804", "0.56198954",
		"0.68752287", "0.30073445", "0.69348664", "0.72515585", "0.40629047",
		"0.09320027", "0.24334978", "0.91407662", "0.97226538", "0.33904970",
		"0.01717092", "0.60155725", "0.03001652", "0.50979706", "0.80531036",
		"0.17450719", "0.84984399", "0.00498130", "0.51636405", "0.14080868",
		"0.62289701", "0.07853030", "0.70567541", "0.79844050", "0.63766566",
		"0.03559031", "0.40994535", "0.08423996", "0.00389626", "0.50608347",
		"0.19622681", "0.90537903", "0.75458034", "0.75102094", "0.81491673",
		"0.92925931", "0.38074332", "0.54817053", "0.72593246", "0.02146791",
		"0.57990460", "0.87921074", "0.59913886", "0.66726893", "0.24269154",
		"0.73344575", "0.71826052", "0.92313935", "0.05212996", "0.93771536",
		"0.69489385", "0.57581887", "0.48106155", "0.06808800", "0.33633940",
		"0.69142320", "0.46566781", "0.70654143", "0.16541368", "0.76257631",
		"0.82777900", "0.62958327", "0.34757935", "0.10891487", "0.79912728",
		"0.01156543", "0.23111261", "0.58535640", "0.87461956", "0.21723454",
		"0.80409615", "0.33169686", "0.72800785", "0.31218099", "0.13729737",
		"0.41637635", "0.01234597", "0.58313811", "0.66746028", "0.05105595",
		"0.14930937", "0.56044864", "0.76196851", "0.98800104", "0.37075949",
		"0.88740864", "0.40697115", "0.96598278", "0.86013661", "0.85386784",
		"0.23986516", "0.39027464", "0.59593927", "0.00161530", "0.31768197",
		"0.65702729", "0.66461914", "0.62937471", "0.92120758", "0.87578958",
		"0.37539860", "0.59182615", "0.12092214", "0.55130437", "0.86365117",
		"0.38725162", "0.28757657", "0.42803199", "0.39014405", "0.50253853",
		"0.85306128", "0.92018995", "0.71421618", "0.54236780", "0.96221157",
		"0.22956898", "0.96519876", "0.06694102", "0.11915854", "0.01354308",
		"0.24720070", "0.71671739", "0.00604305", "0.65012352", "0.71151390",
		"0.46616159", "0.99228224", "0.20684576", "0.62941006", "0.84535326",
		"0.30678993", "0.55264568", "0.50094784", "0.39409122", "0.15479416",
		"0.36536318", "0.51925656", "0.65567178", "0.67255519", "0.55089659",
		"0.42194295", "0.27172413", "0.79540954", "0.71594806", "0.88372598",
		"0.29179452", "0.66411306", "0.57064687", "0.42494633", "0.73389255",
		"0.12097313", "0.53338622", "0.38493233", "0.79348021", "0.01851341",
		"0.58594454", "0.88396240", "0.04410730", "0.67419924", "0.62770011",
		"0.64644200", "0.40335135", "0.17952644", "0.55564678", "0.56643922",
		"0.37715015", "0.87092180", "0.56726159", "0.34011210", "0.13661819",
		"0.11474177", "0.93930097", "0.48549077", "0.28484289", "0.13374371",
		"0.40966056", "0.73662873", "0.37355323", "0.65216092", "0.27372469",
		"0.56032082", "0.14882684", "0.95462890", "0.17090266", "0.92374766",
		"0.98368259", "0.68448367", "0.02872548", "0.68598279", "0.04601084",
		"0.17170501", "0.08906644", "0.23730372", "0.02929037", "0.38566261",
		"0.68957569", "0.53021050", "0.44200157", "0.32085701", "0.72520053",
		"0.17454174", "0.19676599", "0.88243877", "0.87030228", "0.15124486",
		"0.78670160", "0.51731632", "0.56674531", "0.20910664", "0.84962640",
		"0.05220467", "0.91783159", "0.19138968", "0.68126378", "0.79574471",
		"0.14910848", "0.28030331", "0.98067264", "0.31263980", "0.67448964",
		"0.69266650", "0.40033551", "0.22789781", "0.78317066", "0.55815261",
		"0.11247054", "0.47337901", "0.46310033", "0.53192452", "0.56164078",
		"0.41750378", "0.43880622", "0.69739327", "0.11092778", "0.18333765",
		"0.67222441", "0.12789170", "0.88316806", "0.37891271", "0.14935268",
		"0.64522185", "0.93902079", "0.62481092", "0.21794927", "0.71535266",
		"0.62169579", "0.65147153", "0.01411645", "0.96413465", "0.01021578",
		"0.50605180", "0.51595053", "0.03308040", "0.01497870", "0.07809658",
		"0.35743383", "0.58079701", "0.11785557", "0.89568677", "0.38793964",
		"0.37117709", "0.13994133", "0.11032813", "0.99998594", "0.06695042",
		"0.79774786", "0.11093584", "0.23879095", "0.85918615", "0.16109636",
		"0.63479696", "0.75023359", "0.29061187", "0.53764772", "0.30652318",
		"0.51387302", "0.81620973", "0.82433610", "0.18302488", "0.79048957",
		"0.07598187", "0.27887732", "0.37061042", "0.36441016", "0.93736882",
		"0.77480946", "0.02269132", "0.40309874", "0.16427650", "0.13969296",
		"0.57605029", "0.00242426", "0.56626691", "0.84390990", "0.87455806",
		"0.12321023", "0.87561663", "0.60431578", "0.35880839", "0.50426282",
		"0.50697689", "0.06631164", "0.14976092", "0.89356018", "0.91473662",
		"0.04235237", "0.50073724", "0.75969690", "0.91743994", "0.79352335",
		"0.58078351", "0.91819984", "0.53520520", "0.18267367", "0.05608828",
		"0.68315721", "0.27264599", "0.41245634", "0.69706222", "0.69666203",
		"0.08967342", "0.64081905", "0.22576796", "0.69315628", "0.53981640",
		"0.76059129", "0.56712344", "0.94318621", "0.44081094", "0.31699284",
		"0.29477911", "0.80069824", "0.28366921", "0.96718081", "0.85345644",
		"0.11681215", "0.47600710", "0.33448255", "0.31217271", "0.35469241",
		"0.59511650", "0.49583692", "0.48922303", "0.20215259", "0.60159380",
		"0.17882055", "0.77601258", "0.71020391", "0.41833503", "0.71522856",
		"0.87534517", "0.43703394", "0.43056077", "0.64828071", "0.43069441",
		"0.39356849", "0.32063367", "0.92788963", "0.16878266", "0.56762591",
		"0.56042446", "0.84958464", "0.79408949", "0.08220340", "0.13922856",
		"0.82529019", "0.27134959", "0.00278080", "0.66192389", "0.01782933",
		"0.95404763", "0.50787645", "0.85320521", "0.83690362", "0.83771227",
		"0.46268665", "0.31716742", "0.01716647", "0.68264674", "0.01789888",
		"0.30446846", "0.14942271", "0.26982182", "0.74933947", "0.50394161",
		"0.78444542", "0.40009256", "0.40333422", "0.16627342", "0.01898760",
		"0.04221829", "0.77960213", "0.66230976", "0.56015996", "0.49535426",
		"0.38536259", "0.40406773", "0.99930568", "0.00857945", "0.16158390",
		"0.64805163", "0.20237524", "0.59106326", "0.76968277", "0.96887042",
		"0.29264851", "0.97373775", "0.16767633", "0.33014482", "0.27426548",
		"0.10947014", "0.75920652", "0.37757457", "0.13125207", "0.00826451",
		"0.96684342", "0.69362226", "0.22763554", "0.20717541", "0.42112268",
		"0.22803038", "0.33481806", "0.14968742", "0.71598558", "0.55126711",
		"0.64518015", "0.65170197", "0.89103003", "0.72728361", "0.24485454",
		"0.09410780", "0.79818029", "0.54212409", "0.17790462", "0.64442619",
		"0.62193511", "0.51193256", "0.02848781", "0.05719604", "0.45795152",
		"0.03219332", "0.28310254", "0.85746127", "0.64890240", "0.20658356",
		"0.50946422", "0.80432490", "0.08354468", "0.09222723", "0.67455943",
		"0.44638771", "0.76366629", "0.99677267", "0.89311242", "0.11627279",
		"0.09181302", "0.44767077", "0.16448724", "0.26005539", "0.28670391",
		"0.52465703", "0.43598116", "0.41869096", "0.98043420", "0.01497272",
		"0.51791571", "0.61825308", "0.85503436", "0.63025655", "0.02719292",
		"0.09865668", "0.30321729", "0.56998039", "0.14946350", "0.64823918",
		"0.19931639", "0.14623555", "0.54169913", "0.68944135", "0.73551005",
		"0.46743658", "0.04109096", "0.26625801", "0.09537298", "0.98207890",
		"0.58109721", "0.70793680", "0.84379365", "0.42774726", "0.12653597",
		"0.08566633", "0.53366781", "0.33960092", "0.11036831", "0.84464510",
		"0.16493476", "0.92493443", "0.87640673", "0.52727644", "0.57181349",
		"0.65071340", "0.00978637", "0.31700693", "0.69148222", "0.85063311",
		"0.06781819", "0.30794534", "0.65541667", "0.16400484", "0.06886223",
		"0.96227205", "0.09633060", "0.34513153", "0.31013900", "0.78165882",
		"0.39583699", "0.86327936", "0.69269199", "0.11016575", "0.67358419",
		"0.81775427", "0.50052824", "0.30068582", "0.16606837", "0.62243724",
		"0.47863741", "0.68796498", "0.31526949", "0.41180883", "0.23022147",
		"0.82342139", "0.83003381", "0.53571829", "0.41081533", "0.48600142"
	};

}

void GRandMersenneTwister::test()
{
	std::string s("");
	uint64_t init[4]={0x12345ULL, 0x23456ULL, 0x34567ULL, 0x45678ULL};
	uint64_t length=4;
	GRandMersenneTwister tw(1);
	tw.init_by_array64(init, length);
	for(int i = 0; i < 1000; ++i){
		TestEqual(uint64MTTestValues[i], tw.next(), s+
							"Mersenne Twister "
							"pseudo random integer value did not match the expected value at "
							"uint64MTTestValues["+to_str(i)+"]");
	}
	for(int i = 0; i < 1000; ++i){
		std::stringstream val;
		val.width(10);
		val.precision(8);
		val.setf(std::ios::fixed);
		val << tw.uniform();
		TestEqual(realMTTestValues[i], val.str(), s+
							"Mersenne Twister "
							"pseudo random real value did not match the expected value at "
							"real64MTTestValues["+to_str(i)+"]");
	}

}

#endif // !MIN_PREDICT

} // namespace GClasses
